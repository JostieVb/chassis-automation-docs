.. _Modeler:

Modeler
=======

.. _ModelerIntroduction:

Introduction
------------

The modeler uses a toolkit called `BPMN-js
<https://github.com/bpmn-io/bpmn-js>`_. The modeler is used when creating or editing a process on the 'Processes' page.
This chapter will explain the features of the modeler.

.. _ModelerSupportedBpmnItems:

Supported BPMN items
--------------------

This table shows BPMN items that are currently supported by Chassis Automation's modeler.

+-------------------------------+----------------------------------------------------------------------+
| Item                          | Brief description                                                    |
+===============================+======================================================================+
| Start-event                   | The very beginning of a process                                      |
+-------------------------------+----------------------------------------------------------------------+
| User-task                     | The assigned user has to execute a task before the process continues |
+-------------------------------+----------------------------------------------------------------------+
| Send-task                     | Send a message with a task to the assigned user                      |
+-------------------------------+----------------------------------------------------------------------+
| Receive-task                  | Send a message to the assigned user                                  |
+-------------------------------+----------------------------------------------------------------------+
| Exclusive gateway (X-OR)      | The flow gets divided to one of the output branches                  |
+-------------------------------+----------------------------------------------------------------------+
| End-event                     | The very end of a process.                                           |
+-------------------------------+----------------------------------------------------------------------+

.. _ModelerBasics:

Modeler basics
--------------

The modeler component can be found in ``chassis-automation-client/src/app/processes/pages/modeler/modeler.component.ts``.
The modeler is initialized in the ``instantiateModeler()`` method and is stored in the protected ``modeler`` property of the modeler component.
If you need to add additional modules to the modeler, you can import them to the modeler component add them to the ``additionalModules`` array
in the ``instantiateModeler()`` function. An example is shown below.

.. code-block:: javascript

    import { AdditionalModuleName } from 'additional/module/path';

    export class ModelerComponent implements OnInit, OnDestroy {

        instantiateModeler() {
            return new Modeler({
                container: '.canvas',
                additionalModules: [
                    // Add additional modules here
                ]
            });
        }

    }

.. _ModelerHostListener:

Properties panel
----------------

After a process is loaded, the interaction hook of the modeler will be initialized to enable user interaction with properties that are bound to certain items of the modeler.
The event listener is set in the ``setModelerEventHooks()`` method. After double clicking a item which type is registered in the ``REGISTERED_PROPERTIES`` constant, the properties panel
will be opened and the corresponding properties will be shown. To extend the range of items that can be edited with the properties panel, you simply have to add the type of the item
to the ``REGISTERED_PROPERTIES`` constant. This constant can be found in ``chassis-automation-client/src/app/processes/models/properties/registered-properties.ts``.
Currently, it holds the following values.

.. code-block:: javascript

    export const REGISTERED_PROPERTIES = [
        'startevent',
        'task',
        'usertask',
        'sendtask',
        'receivetask',
        'sequenceflow'
    ];

.. danger::

    A new editable type should be added to this array as a **lowercase string without any spaces or other seperators between words**.

When an editableType is clicked, the ``initProperties(id: string, type: string)`` method initializes the properties for the selected item.
The properties will be displayed if they already exist for the clicked item. If they don't exist, they will be created by the ``generatePropertiesByType(id: string, type: string, sequence: any)`` method in the
that can be found in the properties service.

The properties service
~~~~~~~~~~~~~~~~~~~~~~

The properties service can be found in ``chassis-automation-client/src/app/processes/services/properties.service.ts``.
This service handles the communication between the modeler and the properties panel.

Extending the properties panel
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The template that is shown in the properties panel is based on the type that is currently being edited. Each type has its own template.
You can find these templates in ``chassis-automation/chassis-automation-client/src/app/processes/pages/properties-panel/templates``.
To add a new property, you can simply add a input field that fits by the desired needs of the new property. Next, you just have to
set the ``ngModel`` of the input field to the property's name of the ``fieldBindings`` object. This object is bound to all properties
that can be edited with the properties panel.

Sometimes, you want to store a property directly into the modeler XML instead of the separate JSON object. For example, when you want
to edit the name of an item via the properties panel. To update the property also in this way, you need to call the ``updateProperty(propertyName: string, updateNativeProperty: boolean)``
method on ``ngModelChange``.
The ``updateNativeProperty`` must be set to ``true`` in this case. An example is shown below.

.. code-block:: text

    <div class="text-input">
        <h5>Name of the task</h5>
        <input type="text" name="name" [(ngModel)]="fieldBindings['name']" (ngModelChange)="updateProperty('name', true)" class="form-control" placeholder="Enter a name for this task" />
    </div>